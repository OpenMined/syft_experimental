// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Message_SyftMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Message_SyftMessage.OneOf_ID? = nil

  var idNull: Bool {
    get {
      if case .idNull(let v)? = id {return v}
      return false
    }
    set {id = .idNull(newValue)}
  }

  var localID: String {
    get {
      if case .localID(let v)? = id {return v}
      return String()
    }
    set {id = .localID(newValue)}
  }

  var remote: String {
    get {
      if case .remote(let v)? = id {return v}
      return String()
    }
    set {id = .remote(newValue)}
  }

  var capability: String = String()

  var args: [String] = []

  var kwargs: Dictionary<String,String> = [:]

  var obj: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_ID: Equatable {
    case idNull(Bool)
    case localID(String)
    case remote(String)

  #if !swift(>=4.1)
    static func ==(lhs: Message_SyftMessage.OneOf_ID, rhs: Message_SyftMessage.OneOf_ID) -> Bool {
      switch (lhs, rhs) {
      case (.idNull(let l), .idNull(let r)): return l == r
      case (.localID(let l), .localID(let r)): return l == r
      case (.remote(let l), .remote(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "message"

extension Message_SyftMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SyftMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    100: .standard(proto: "id_null"),
    101: .standard(proto: "local_id"),
    102: .same(proto: "remote"),
    201: .same(proto: "capability"),
    300: .same(proto: "args"),
    400: .same(proto: "kwargs"),
    501: .same(proto: "obj"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 100:
        if self.id != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.id = .idNull(v)}
      case 101:
        if self.id != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.id = .localID(v)}
      case 102:
        if self.id != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.id = .remote(v)}
      case 201: try decoder.decodeSingularStringField(value: &self.capability)
      case 300: try decoder.decodeRepeatedStringField(value: &self.args)
      case 400: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.kwargs)
      case 501: try decoder.decodeSingularBytesField(value: &self.obj)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.id {
    case .idNull(let v)?:
      try visitor.visitSingularBoolField(value: v, fieldNumber: 100)
    case .localID(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 101)
    case .remote(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 102)
    case nil: break
    }
    if !self.capability.isEmpty {
      try visitor.visitSingularStringField(value: self.capability, fieldNumber: 201)
    }
    if !self.args.isEmpty {
      try visitor.visitRepeatedStringField(value: self.args, fieldNumber: 300)
    }
    if !self.kwargs.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.kwargs, fieldNumber: 400)
    }
    if !self.obj.isEmpty {
      try visitor.visitSingularBytesField(value: self.obj, fieldNumber: 501)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Message_SyftMessage, rhs: Message_SyftMessage) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.capability != rhs.capability {return false}
    if lhs.args != rhs.args {return false}
    if lhs.kwargs != rhs.kwargs {return false}
    if lhs.obj != rhs.obj {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
